type Mutation {
    addBonusMutation(chestHistoryId: Int!,
        awardId: Int!): AddBonusReturnType

    addPointsMutation (studentId: Int!,
        teacherId: Int!,
        value: Int!,
        subcategoryId: Int!): PointsType
}

type AddBonusReturnType {
    bonus: BonusType
    points: PointsType
}

type BonusType {
    bonusId: Int!
    points: PointsType!
    award: AwardType!
    chestHistory: ChestHistoryType!
    label: String!
    createdAt: String!
    updatedAt: String!
}

type PointsType {
    pointsId: Int!
    student: UsersType!
    teacher: UsersType!
    value: Int!
    subcategory: SubcategoriesType!
    label: String!
    createdAt: String!
    updatedAt: String!
}

type AwardType {
    awardId: Int!
    awardName: String!
    awardType: AwardTypeType!
    maxUsages: Int!
    label: String!
}

type SubcategoriesType {
    subcategoryId: Int!
    subcategoryName: String!
    maxPoints: Int!
    ordinalNumber: Int!
    category: CategoriesType!
    edition: EditionType!
    label: String!
}

type ChestHistoryType {
    chestHistoryId: Int!
    user: UsersType!
    teacher: UsersType!
    chest: ChestType!
    subcategory: SubcategoriesType!
    label: String!
    createdAt: String!
    updatedAt: String!
}

type ChestType {
    chestId: Int!
    chestType: String!
    label: String!
    edition: EditionType!
}

type CategoriesType {
    categoryId: Int!
    categoryName: String!
    label: String!
}

type EditionType {
    editionId: Int!
    editionName: String!
    editionYear: Int!
    label: String!
}

type UsersType {
    userId: Int!
    indexNumber: Int!
    nick: String!
    firstName: String!
    secondName: String!
    role: UsersRolesType!
    label: String!
}

enum UsersRolesType {
    STUDENT
    TEACHER
    COORDINATOR
}

enum AwardTypeType {
    ADDITIVE_NEXT
    ADDITIVE_PREV
    ADDITIVE
    MULTIPLICATIVE
}
