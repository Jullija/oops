type Mutation {
    createBonus(chestHistoryId: Int!,
        awardId: Int!): createBonusPayload
    createPoints(studentId: Int!,
        teacherId: Int!,
        value: Int!,
        subcategoryId: Int!): Points
}

type createBonusPayload {
    bonus: Bonus
    points: Points
}

type Bonus {
    bonusId: Int!
    points: Points!
    award: Award!
    chestHistory: ChestHistory!
    label: String!
    createdAt: String!
    updatedAt: String!
}

type Points {
    pointsId: Int!
    student: Users!
    teacher: Users!
    value: Int!
    subcategory: Subcategories!
    label: String!
    createdAt: String!
    updatedAt: String!
}

type Award {
    awardId: Int!
    awardName: String!
    awardType: AwardType!
    maxUsages: Int!
    label: String!
}

type Subcategories {
    subcategoryId: Int!
    subcategoryName: String!
    maxPoints: Int!
    category: Categories!
    edition: Edition!
    label: String!
}

type ChestHistory {
    chestHistoryId: Int!
    user: Users!
    teacher: Users!
    chest: Chest!
    subcategory: Subcategories!
    label: String!
    createdAt: String!
    updatedAt: String!
}

type Chest {
    chestId: Int!
    chestType: String!
    label: String!
    edition: Edition!
}

type Categories {
    categoryId: Int!
    categoryName: String!
    label: String!
}

type Edition {
    editionId: Int!
    editionName: String!
    editionYear: Int!
    label: String!
}

type Users {
    userId: Int!
    indexNumber: Int!
    nick: String!
    firstName: String!
    secondName: String!
    role: UsersRoles!
    label: String!
}

enum UsersRoles {
    STUDENT
    TEACHER
    ADMIN
}

enum AwardType {
    ADDITIVE_NEXT
    ADDITIVE_PREV
    ADDITIVE
    MULTIPLICATIVE
}