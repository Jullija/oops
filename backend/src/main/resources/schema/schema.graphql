type Mutation {
    addBonusMutation(chestHistoryId: Int!,
        awardId: Int!): AddBonusReturnType

    addPointsMutation (studentId: Int!,
        teacherId: Int!,
        value: Float!,
        subcategoryId: Int!): PointType
    assignPhotosToGroups(editionId: Int!): Boolean
    assignAvatarToUser(userId: Int!, fileId: Int!): Boolean
    addLevel(editionId: Int!, name: String!, maximumPoints: Float!, grade: Float!, imageFileId: Int): LevelType
}

type Query {
    getUsersInGroupWithPoints(groupId: Int!): [UserPointsType]!
    getStudentPoints(studentId: Int!, editionId: Int!): StudentPointsType!
    getSumOfPointsForStudentByCategory(studentId: Int!, editionId: Int!): [CategoryPointsSumType!]!
    getPossibleGroupsWeekdays(editionId: Int!): [String!]!
    getPossibleGroupsTimeSpans(editionId: Int!): [TimeSpansType!]!
    getPossibleGroupDates(editionId: Int!): [GroupDateType!]!
}

type AwardType {
    awardId: ID!
    awardName: String!
    awardType: AwardTypeType!
    label: String!
    maxUsages: Int!
    awardValue: Float!
    category: CategoryType
    imageFile: FileType
    awardEditions: [AwardEditionType]
}

type AwardEditionType {
    award: AwardType!
    edition: EditionType!
    awardEditionId: ID!
    label: String!
}

type BonusType {
    bonusId: ID!
    points: PointType!
    award: AwardType!
    createdAt: String!
    updatedAt: String!
    label: String!
    chestHistory: ChestHistoryType!
}

type CategoryType {
    categoryId: ID!
    categoryName: String!
    label: String!
}

type ChestAwardType {
    chestAwardId: ID!
    chest: ChestType!
    award: AwardType!
    label: String!
}

type ChestHistoryType {
    chestHistoryId: ID!
    user: UserType!
    chest: ChestType!
    subcategory: SubcategoryType!
    label: String!
    createdAt: String!
    updatedAt: String!
    teacher: UserType!
    opened: Boolean!
}

type ChestType {
    chestId: ID!
    chestType: String!
    label: String!
    edition: EditionType!
    imageFile: FileType
}

type EditionType {
    editionId: ID!
    editionName: String!
    editionYear: Int!
    label: String!
}

type FileType {
    fileId: ID!
    pathToFile: String!
    fileName: String!
    fileType: String!
    label: String!
}

type GroupType {
    groupsId: ID!
    groupName: String!
    label: String
    teacher: UserType
    weekday: String!
    startTime: String!
    endTime: String!
    imageFile: FileType
    userGroups: [UserGroupType]!
    edition: EditionType!
}

type LevelType {
    levelId: ID!
    levelName: String!
    minimumPoints: Float!
    maximumPoints: Float!
    grade: Float!
    ordinalNumber: Int!
    label: String!
    edition: EditionType!
    highest: Boolean!
    imageFile: FileType
    userLevels: [UserLevelType]
}

type PointType {
    pointsId: ID!
    student: UserType!
    teacher: UserType!
    value: Float!
    subcategory: SubcategoryType!
    label: String!
    createdAt: String!
    updatedAt: String!
}

type SubcategoryType {
    subcategoryId: ID!
    subcategoryName: String!
    category: CategoryType!
    label: String!
    edition: EditionType!
    maxPoints: Float!
    ordinalNumber: Int!
}

type UserGroupType {
    userGroupsId: ID!
    group: GroupType!
    user: UserType!
}

type UserLevelType {
    user: UserType!
    level: LevelType!
    edition: EditionType!
    label: String!
    userLevelId: ID!
}

type UserType {
    userId: ID!
    nick: String!
    role: UsersRolesType!
    indexNumber: Int!
    firstName: String!
    secondName: String!
    label: String!
    imageFile: FileType
    userGroups: [UserGroupType]!
    userLevels: [UserLevelType]!
}

enum UsersRolesType {
    STUDENT
    TEACHER
    COORDINATOR
}

enum AwardTypeType {
    ADDITIVE_NEXT
    ADDITIVE_PREV
    ADDITIVE
    MULTIPLICATIVE
}





type CategoryPointsSumType{
    category: CategoryType!
    sumOfPurePoints: Float!
    sumOfBonuses: Float!
    sumOfAll: Float!
    maxPoints: Float!
}

type StudentPointsType{
    user: UserType!
    level: LevelType
    subcategoryPoints: [SubcategoryPointsType]!
    sumOfPurePoints: Float!
    sumOfBonuses: Float!
    sumOfAll: Float!
}

type AddBonusReturnType {
    bonus: BonusType!
    points: PointType!
}

type UserPointsType {
    user: UserType!
    categoriesPoints: [CategoryPointsType!]!
}

type CategoryAggregate {
    category: CategoryType!
    sumOfPurePoints: Float!
    sumOfBonuses: Float!
    sumOfAll: Float!
}

type CategoryPointsType {
    category: CategoryType!
    subcategoryPoints: [SubcategoryPointsType!]!
    aggregate: CategoryAggregate!
}

type SubcategoryPointsType {
    subcategory: SubcategoryType!
    points: PurePointsType!
}

type PurePointsType {
    purePoints: PointType
    partialBonusType: [PartialBonusType]!
}

type PartialBonusType {
    bonuses: BonusType!
    partialValue: Float!
}

type TimeSpansType {
    startTime: String
    endTime: String
}

type GroupDateType {
    weekday: String
    startTime: String
    endTime: String
}
