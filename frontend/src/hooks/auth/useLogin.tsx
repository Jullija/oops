import { useNavigate } from "react-router-dom";
import { User } from "../../contexts/userContext";
import { useCurrentUserLazyQuery } from "../../graphql/currentUser.graphql.types";
import { pathsGenerator } from "../../router/paths";
import { defaultUnauthenticatedUser, Roles } from "../../utils/types";
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from "../../../firebaseConfig";
import Cookies from "js-cookie";
import { useUser } from "../common/useUser";

const cookiesStrings = {
  token: "token",
  user: "user",
};

export const useLogin = () => {
  const navigate = useNavigate();
  const { setUser } = useUser();

  const [fetchCurrentUser] = useCurrentUserLazyQuery();

  const getBypassToken = (userId: string) => {
    return `Bypass${userId}`;
  };

  const loginWithUserSelect = (user: User) => {
    setUser(user);

    const token = getBypassToken(user.userId);
    Cookies.set(cookiesStrings.token, token);
    Cookies.set(cookiesStrings.user, JSON.stringify(user));

    // TODO why tf user.role is not typed
    navigateToStartScreen(user);
  };

  const loginWithCredentials = async (credentials: {
    email: string;
    password: string;
  }) => {
    const { email, password } = credentials;
    const loginWithBypass = password.length < 4;

    // set cookie token
    if (loginWithBypass) {
      // assuming that all generated bypassed allowed by password.length < 4 are correct
      Cookies.set(cookiesStrings.token, getBypassToken(password));
    } else {
      await signInWithEmailAndPassword(auth, email, password);

      const token = await auth.currentUser?.getIdToken();
      if (!token) {
        throw new Error("Token is null - sign in failed.");
      }
      Cookies.set(cookiesStrings.token, token);
    }

    // fetch current user
    const { data } = await fetchCurrentUser();
    const user = data?.getCurrentUser;
    if (!user) {
      logout();
      throw new Error("Fetched current user is undefined");
    }

    Cookies.set(cookiesStrings.user, JSON.stringify(user));
    setUser({
      nick: user.nick,
      // TODO lowercase
      role: user.role.toLocaleLowerCase(),
      userId: user.userId,
    });
    navigateToStartScreen(user as User);
  };

  const navigateToStartScreen = (user: User) => {
    // TODO frontend and backend enums do not match
    switch (user.role.toLocaleLowerCase()) {
      case Roles.COORDINATOR:
      case Roles.TEACHER:
        navigate(pathsGenerator.teacher.Groups);
        break;
      case Roles.STUDENT:
      case Roles.ADMIN:
        navigate(pathsGenerator.student.StudentProfile);
        break;
      default:
        throw new Error("should never happen.");
    }
  };

  const logout = () => {
    Cookies.remove(cookiesStrings.token);
    Cookies.remove(cookiesStrings.user);

    setUser({
      nick: defaultUnauthenticatedUser.nick,
      role: defaultUnauthenticatedUser.role,
      userId: defaultUnauthenticatedUser.userId,
    });

    navigate("/");
  };

  return {
    loginWithUserSelect,
    loginWithCredentials,
    logout,
  };
};
